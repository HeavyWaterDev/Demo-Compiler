
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON DIVIDE END EQ GE GT IF KEYWORD LE LOOP LPAREN LT MINUS NAME NE NUMBER PLUS RPAREN SEMICOLON TIMESstatements : statements statement\n                  | statementstatement : NAME ASSIGN expression\n                 | expression\n                 | IF expression COLON statements END\n                 | LOOP expression COLON statements ENDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[3,3,-2,-19,-4,22,22,22,-18,-1,22,22,22,22,22,22,22,22,22,22,22,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,3,3,-17,3,3,-5,-6,]),'IF':([0,1,2,3,4,8,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[5,5,-2,-19,-4,-18,-1,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,5,5,-17,5,5,-5,-6,]),'LOOP':([0,1,2,3,4,8,9,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[6,6,-2,-19,-4,-18,-1,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,6,6,-17,6,6,-5,-6,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[7,7,-2,-19,-4,7,7,7,-18,-1,7,7,7,7,7,7,7,7,7,7,7,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,7,7,-17,7,7,-5,-6,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[8,8,-2,-19,-4,8,8,8,-18,-1,8,8,8,8,8,8,8,8,8,8,8,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,8,8,-17,8,8,-5,-6,]),'$end':([1,2,3,4,8,9,22,25,26,27,28,29,30,31,32,33,34,35,38,41,42,],[0,-2,-19,-4,-18,-1,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,]),'END':([2,3,4,8,9,22,25,26,27,28,29,30,31,32,33,34,35,38,39,40,41,42,],[-2,-19,-4,-18,-1,-19,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,41,42,-5,-6,]),'ASSIGN':([3,],[10,]),'PLUS':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,11,-18,11,-19,11,11,11,11,11,11,11,11,11,11,11,11,11,-17,]),'MINUS':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,12,-18,12,-19,12,12,12,12,12,12,12,12,12,12,12,12,12,-17,]),'TIMES':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,13,-18,13,-19,13,13,13,13,13,13,13,13,13,13,13,13,13,-17,]),'DIVIDE':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,14,-18,14,-19,14,14,14,14,14,14,14,14,14,14,14,14,14,-17,]),'EQ':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,15,-18,15,-19,15,15,15,15,15,15,15,15,15,15,15,15,15,-17,]),'NE':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,16,-18,16,-19,16,16,16,16,16,16,16,16,16,16,16,16,16,-17,]),'LT':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,17,-18,17,-19,17,17,17,17,17,17,17,17,17,17,17,17,17,-17,]),'LE':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,18,-18,18,-19,18,18,18,18,18,18,18,18,18,18,18,18,18,-17,]),'GT':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,19,-18,19,-19,19,19,19,19,19,19,19,19,19,19,19,19,19,-17,]),'GE':([3,4,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,],[-19,20,-18,20,-19,20,20,20,20,20,20,20,20,20,20,20,20,20,-17,]),'COLON':([8,21,22,23,26,27,28,29,30,31,32,33,34,35,38,],[-18,36,-19,37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'RPAREN':([8,22,24,26,27,28,29,30,31,32,33,34,35,38,],[-18,-19,38,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,36,37,],[1,39,40,]),'statement':([0,1,36,37,39,40,],[2,9,2,2,9,9,]),'expression':([0,1,5,6,7,10,11,12,13,14,15,16,17,18,19,20,36,37,39,40,],[4,4,21,23,24,25,26,27,28,29,30,31,32,33,34,35,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',6),
  ('statements -> statement','statements',1,'p_statements','parser.py',7),
  ('statement -> NAME ASSIGN expression','statement',3,'p_statement','parser.py',11),
  ('statement -> expression','statement',1,'p_statement','parser.py',12),
  ('statement -> IF expression COLON statements END','statement',5,'p_statement','parser.py',13),
  ('statement -> LOOP expression COLON statements END','statement',5,'p_statement','parser.py',14),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',23),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',24),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',25),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',29),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',40),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',44),
]
